// Package TarsTestToolKit comment
// This file was generated by tars2go 1.1.4
// Generated from fetcher.tars
package TarsTestToolKit

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// MemInfo struct implement
type MemInfo struct {
	Total     int64 `json:"total"`
	Used      int64 `json:"used"`
	Cached    int64 `json:"cached"`
	Free      int64 `json:"free"`
	Active    int64 `json:"active"`
	Inactive  int64 `json:"inactive"`
	SwapTotal int64 `json:"swapTotal"`
	SwapUsed  int64 `json:"swapUsed"`
	SwapFree  int64 `json:"swapFree"`
}

func (st *MemInfo) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *MemInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.Total, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Used, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Cached, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Free, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Active, 4, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Inactive, 5, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.SwapTotal, 6, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.SwapUsed, 7, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.SwapFree, 8, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *MemInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require MemInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *MemInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.Total, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Used, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Cached, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Free, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Active, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Inactive, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.SwapTotal, 6)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.SwapUsed, 7)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.SwapFree, 8)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *MemInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CoreInfo struct implement
type CoreInfo struct {
	Total int64 `json:"total"`
	Used  int64 `json:"used"`
	Idle  int64 `json:"idle"`
}

func (st *CoreInfo) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CoreInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.Total, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Used, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Idle, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CoreInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CoreInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CoreInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.Total, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Used, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Idle, 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CoreInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// ResResp struct implement
type ResResp struct {
	Code    uint32     `json:"code"`
	Msg     string     `json:"msg"`
	Cores   []CoreInfo `json:"cores"`
	MemInfo MemInfo    `json:"memInfo"`
}

func (st *ResResp) ResetDefault() {
	st.MemInfo.ResetDefault()
}

//ReadFrom reads  from _is and put into struct.
func (st *ResResp) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_uint32(&st.Code, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Msg, 1, true)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Cores = make([]CoreInfo, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.Cores[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	err = st.MemInfo.ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ResResp) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ResResp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ResResp) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_uint32(st.Code, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Msg, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Cores)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Cores {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	err = st.MemInfo.WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ResResp) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
