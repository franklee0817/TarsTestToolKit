// Package bm comment
// This file was generated by tars2go 1.1.4
// Generated from BTNode.tars
package bm

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

type TaskState int32

const (
	TaskState_TS_IDLE     = 0
	TaskState_TS_RUNNING  = 1
	TaskState_TS_FINISHED = 2
)

// ResultStat struct implement
type ResultStat struct {
	Time_stamp    int64           `json:"time_stamp"`
	Ret_map       map[int32]int64 `json:"ret_map"`
	Cost_map      map[int32]int64 `json:"cost_map"`
	Total_request int64           `json:"total_request"`
	Succ_request  int64           `json:"succ_request"`
	Fail_request  int64           `json:"fail_request"`
	Max_time      float64         `json:"max_time"`
	Min_time      float64         `json:"min_time"`
	Total_time    float64         `json:"total_time"`
	P999_time     float64         `json:"p999_time"`
	P99_time      float64         `json:"p99_time"`
	P90_time      float64         `json:"p90_time"`
	Send_bytes    int64           `json:"send_bytes"`
	Recv_bytes    int64           `json:"recv_bytes"`
	Avg_speed     int32           `json:"avg_speed"`
}

func (st *ResultStat) ResetDefault() {
	st.Max_time = 0.0
	st.Min_time = 1000.0
	st.Total_time = 0.0
	st.P999_time = 0.0
	st.P99_time = 0.0
	st.P90_time = 0.0
}

//ReadFrom reads  from _is and put into struct.
func (st *ResultStat) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.Time_stamp, 0, false)
	if err != nil {
		return err
	}

	err, have = _is.SkipTo(codec.MAP, 1, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Ret_map = make(map[int32]int64)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 int32
			var v0 int64

			err = _is.Read_int32(&k0, 0, false)
			if err != nil {
				return err
			}

			err = _is.Read_int64(&v0, 1, false)
			if err != nil {
				return err
			}

			st.Ret_map[k0] = v0
		}
	}

	err, have = _is.SkipTo(codec.MAP, 2, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Cost_map = make(map[int32]int64)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {
			var k1 int32
			var v1 int64

			err = _is.Read_int32(&k1, 0, false)
			if err != nil {
				return err
			}

			err = _is.Read_int64(&v1, 1, false)
			if err != nil {
				return err
			}

			st.Cost_map[k1] = v1
		}
	}

	err = _is.Read_int64(&st.Total_request, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Succ_request, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Fail_request, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.Max_time, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.Min_time, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.Total_time, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.P999_time, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.P99_time, 10, false)
	if err != nil {
		return err
	}

	err = _is.Read_float64(&st.P90_time, 11, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Send_bytes, 12, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Recv_bytes, 13, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Avg_speed, 14, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ResultStat) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ResultStat, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ResultStat) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.Time_stamp, 0)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Ret_map)), 0)
	if err != nil {
		return err
	}

	for k2, v2 := range st.Ret_map {

		err = _os.Write_int32(k2, 0)
		if err != nil {
			return err
		}

		err = _os.Write_int64(v2, 1)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.MAP, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Cost_map)), 0)
	if err != nil {
		return err
	}

	for k3, v3 := range st.Cost_map {

		err = _os.Write_int32(k3, 0)
		if err != nil {
			return err
		}

		err = _os.Write_int64(v3, 1)
		if err != nil {
			return err
		}

	}

	err = _os.Write_int64(st.Total_request, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Succ_request, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Fail_request, 5)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.Max_time, 6)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.Min_time, 7)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.Total_time, 8)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.P999_time, 9)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.P99_time, 10)
	if err != nil {
		return err
	}

	err = _os.Write_float64(st.P90_time, 11)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Send_bytes, 12)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Recv_bytes, 13)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Avg_speed, 14)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ResultStat) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// ExecItem struct implement
type ExecItem struct {
	Proto   string `json:"proto"`
	Service string `json:"service"`
	Threads int32  `json:"threads"`
	Links   int32  `json:"links"`
	Speed   int32  `json:"speed"`
}

func (st *ExecItem) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *ExecItem) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Proto, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Service, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Threads, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Links, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Speed, 4, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ExecItem) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ExecItem, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ExecItem) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Proto, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Service, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Threads, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Links, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Speed, 4)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ExecItem) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// NodeStat struct implement
type NodeStat struct {
	Ipaddr       string     `json:"ipaddr"`
	Max_speed    int32      `json:"max_speed"`
	Max_threads  int32      `json:"max_threads"`
	Left_speed   int32      `json:"left_speed"`
	Left_threads int32      `json:"left_threads"`
	Executors    []ExecItem `json:"executors"`
}

func (st *NodeStat) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *NodeStat) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Ipaddr, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Max_speed, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Max_threads, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Left_speed, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Left_threads, 4, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(5, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Executors = make([]ExecItem, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = st.Executors[i0].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *NodeStat) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require NodeStat, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *NodeStat) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Ipaddr, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Max_speed, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Max_threads, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Left_speed, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Left_threads, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Executors)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Executors {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *NodeStat) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// QueryRsp struct implement
type QueryRsp struct {
	Stat   ResultStat `json:"stat"`
	Ipaddr string     `json:"ipaddr"`
}

func (st *QueryRsp) ResetDefault() {
	st.Stat.ResetDefault()
}

//ReadFrom reads  from _is and put into struct.
func (st *QueryRsp) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = st.Stat.ReadBlock(_is, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Ipaddr, 1, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *QueryRsp) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require QueryRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *QueryRsp) WriteTo(_os *codec.Buffer) error {
	var err error

	err = st.Stat.WriteBlock(_os, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Ipaddr, 1)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *QueryRsp) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// TaskConf struct implement
type TaskConf struct {
	Proto     string   `json:"proto"`
	Service   string   `json:"service"`
	Paralist  []string `json:"paralist"`
	Endpoints []string `json:"endpoints"`
	Links     int32    `json:"links"`
	Speed     int32    `json:"speed"`
	Runflag   int32    `json:"runflag"`
}

func (st *TaskConf) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *TaskConf) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Proto, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Service, 1, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(2, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Paralist = make([]string, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = _is.Read_string(&st.Paralist[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err, have, ty = _is.SkipToNoCheck(3, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Endpoints = make([]string, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = _is.Read_string(&st.Endpoints[i1], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = _is.Read_int32(&st.Links, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Speed, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Runflag, 6, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *TaskConf) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require TaskConf, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *TaskConf) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Proto, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Service, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Paralist)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Paralist {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Endpoints)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Endpoints {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.Write_int32(st.Links, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Speed, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Runflag, 6)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *TaskConf) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
