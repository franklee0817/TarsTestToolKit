// Package bm comment
// This file was generated by tars2go 1.1.4
// Generated from BTAdmin.tars
package bm

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// TaskStat struct implement
type TaskStat struct {
	Conf        TaskConf         `json:"conf"`
	State       int32            `json:"state"`
	Start_time  int64            `json:"start_time"`
	Fetch_time  int64            `json:"fetch_time"`
	Duration    int64            `json:"duration"`
	Speed_quota map[string]int32 `json:"speed_quota"`
}

func (st *TaskStat) ResetDefault() {
	st.Conf.ResetDefault()
}

//ReadFrom reads  from _is and put into struct.
func (st *TaskStat) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = st.Conf.ReadBlock(_is, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.State, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Start_time, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Fetch_time, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.Duration, 4, false)
	if err != nil {
		return err
	}

	err, have = _is.SkipTo(codec.MAP, 5, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Speed_quota = make(map[string]int32)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 int32

			err = _is.Read_string(&k0, 0, false)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&v0, 1, false)
			if err != nil {
				return err
			}

			st.Speed_quota[k0] = v0
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *TaskStat) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require TaskStat, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *TaskStat) WriteTo(_os *codec.Buffer) error {
	var err error

	err = st.Conf.WriteBlock(_os, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.State, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Start_time, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Fetch_time, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.Duration, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.MAP, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Speed_quota)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.Speed_quota {

		err = _os.Write_string(k1, 0)
		if err != nil {
			return err
		}

		err = _os.Write_int32(v1, 1)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *TaskStat) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// BenchmarkSummary struct implement
type BenchmarkSummary struct {
	Nodes        map[string]NodeStat   `json:"nodes"`
	Result       map[string]ResultStat `json:"result"`
	Total_result map[string]ResultStat `json:"total_result"`
	Task         map[string]TaskStat   `json:"task"`
}

func (st *BenchmarkSummary) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *BenchmarkSummary) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have = _is.SkipTo(codec.MAP, 0, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Nodes = make(map[string]NodeStat)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 NodeStat

			err = _is.Read_string(&k0, 0, false)
			if err != nil {
				return err
			}

			err = v0.ReadBlock(_is, 1, false)
			if err != nil {
				return err
			}

			st.Nodes[k0] = v0
		}
	}

	err, have = _is.SkipTo(codec.MAP, 1, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Result = make(map[string]ResultStat)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {
			var k1 string
			var v1 ResultStat

			err = _is.Read_string(&k1, 0, false)
			if err != nil {
				return err
			}

			err = v1.ReadBlock(_is, 1, false)
			if err != nil {
				return err
			}

			st.Result[k1] = v1
		}
	}

	err, have = _is.SkipTo(codec.MAP, 2, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Total_result = make(map[string]ResultStat)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {
			var k2 string
			var v2 ResultStat

			err = _is.Read_string(&k2, 0, false)
			if err != nil {
				return err
			}

			err = v2.ReadBlock(_is, 1, false)
			if err != nil {
				return err
			}

			st.Total_result[k2] = v2
		}
	}

	err, have = _is.SkipTo(codec.MAP, 3, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Task = make(map[string]TaskStat)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {
			var k3 string
			var v3 TaskStat

			err = _is.Read_string(&k3, 0, false)
			if err != nil {
				return err
			}

			err = v3.ReadBlock(_is, 1, false)
			if err != nil {
				return err
			}

			st.Task[k3] = v3
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *BenchmarkSummary) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require BenchmarkSummary, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *BenchmarkSummary) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.MAP, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Nodes)), 0)
	if err != nil {
		return err
	}

	for k4, v4 := range st.Nodes {

		err = _os.Write_string(k4, 0)
		if err != nil {
			return err
		}

		err = v4.WriteBlock(_os, 1)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Result)), 0)
	if err != nil {
		return err
	}

	for k5, v5 := range st.Result {

		err = _os.Write_string(k5, 0)
		if err != nil {
			return err
		}

		err = v5.WriteBlock(_os, 1)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.MAP, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Total_result)), 0)
	if err != nil {
		return err
	}

	for k6, v6 := range st.Total_result {

		err = _os.Write_string(k6, 0)
		if err != nil {
			return err
		}

		err = v6.WriteBlock(_os, 1)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.MAP, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Task)), 0)
	if err != nil {
		return err
	}

	for k7, v7 := range st.Task {

		err = _os.Write_string(k7, 0)
		if err != nil {
			return err
		}

		err = v7.WriteBlock(_os, 1)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *BenchmarkSummary) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// BenchmarkUnit struct implement
type BenchmarkUnit struct {
	Owner      string   `json:"owner"`
	Servant    string   `json:"servant"`
	Rpcfunc    string   `json:"rpcfunc"`
	Para_input string   `json:"para_input"`
	Para_value string   `json:"para_value"`
	Paralist   []string `json:"paralist"`
	Endpoints  []string `json:"endpoints"`
	Links      int32    `json:"links"`
	Speed      int32    `json:"speed"`
	Duration   int32    `json:"duration"`
	Proto      string   `json:"proto"`
}

func (st *BenchmarkUnit) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *BenchmarkUnit) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Owner, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Servant, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Rpcfunc, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Para_input, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Para_value, 4, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(5, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Paralist = make([]string, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = _is.Read_string(&st.Paralist[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err, have, ty = _is.SkipToNoCheck(6, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Endpoints = make([]string, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = _is.Read_string(&st.Endpoints[i1], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = _is.Read_int32(&st.Links, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Speed, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Duration, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Proto, 10, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *BenchmarkUnit) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require BenchmarkUnit, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *BenchmarkUnit) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Owner, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Servant, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Rpcfunc, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Para_input, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Para_value, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Paralist)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Paralist {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.LIST, 6)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Endpoints)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Endpoints {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.Write_int32(st.Links, 7)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Speed, 8)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Duration, 9)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Proto, 10)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *BenchmarkUnit) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
